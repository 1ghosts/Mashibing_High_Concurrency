package com.basic.chapter0200;

/**
 * 简介
 * 指导性思想（极其重要）
 * 第一步：考虑问题域中有哪些类，哪些对象
 * 第二步：这些个类，这些个对象有哪些个类哪些个属性
 * 第三步：考虑类与类之间的关系，定他们之间的方法
 *
 * 分析问题域方法
 * 类，成员变量（属性）：找名词
 * 方法（函数）：找动词
 *
 * 万事万物皆对象
 * 追求：
 *      重用，可扩展性(多态)，可维护性，面向组件（二进制级别抽象）的编程，WebService，SOA，COM
 *
 * @author MarkShen1992
 * @since 20191104
 */
public class Chapter0200Introduction {
    public static void main(String[] args) {
        /**
         * 编程语言的发展
         * 面向过程设计思想
         *      一切以我为中心
         *      我第一步要干什么；
         *        第二步要干什么；
         *        ......
         *
         * 面向对象设计思想
         *      车 go(新疆)，车怎么去，我不知道，最合适的方法应该出现在最合适的类里面，
         *      车最知道自己的内部结构。在程序内，不在分解一步一步的过程，而是在问题域
         *      里应该有哪些个对象，对象里面应该有哪些属性（静），哪些方法（动），对象
         *      与对象之间的关系。
         *
         * 对象和类的概念
         *      类是抽象的：具有某些特征的东西。一类事物的抽象。静态的属性
         *          瓶子能倒水
         *      对象是具体的，对应着数据库中的一条记录
         *
         * 类之间的关系
         *      依赖 < 关联（我这个方法的参数是你这个类的对象） < 聚合 < 组合
         *      为 设计模式 打基础
         *      继承：...是一种..., extends
         *      聚合：整体与局部的关系，...是...的一部分。
         *      组合：密不可分，...是...必不可少的一部分。
         *      UML图
         *      实现关系：implements
         *      多态：
         *          存在继承关系；
         *          方法重写
         *          父类引用指向子类对象
         *
         * 对象和引用
         * Java类的定义
         * 构造函数
         * 对象的创建和使用
         * this 关键字
         * static 关键字
         * package import 关键字
         * 访问控制 public protected private 友好
         * 类的继承
         * 方法的重写
         * final 关键字
         * Object 类
         * 对象转型
         * 多态
         * 抽象类
         * 接口
         */
    }
}
